# -*- coding: utf-8 -*-
"""Decisiontree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GzAk2YEwbsGve-ImKNoPQ6EyvRpsgNy7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# import seaborn as sns
# %matplotlib inline
from sklearn.preprocessing import LabelEncoder #for train test splitting
from sklearn.model_selection import train_test_split #for decision tree object
from sklearn.tree import DecisionTreeClassifier #for checking testing results
from sklearn.metrics import classification_report, confusion_matrix #for visualizing tree
from sklearn.tree import plot_tree

location = '/content/drive/MyDrive/access_rule.xlsx'
df = pd.read_excel(location)
print(df)

target = df['Access']
print(target)

'''
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(data['name'])
le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))
print(le_name_mapping)
{'Tom': 0, 'Nick': 1, 'Kate': 2}
'''

df1 = df.copy()
df1 = df1.drop('Access', axis=1)
print(type(df1))
# tr=df1.tranpose()
le = LabelEncoder()
le_name_map={}

le.fit(df1['DESIGNATION'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['DESIGNATION']=le.fit_transform(df1['DESIGNATION'])
print(le_name_mapping)
# print(le_name_map)
# print(df1['DESIGNATION'])

le.fit(df1['Project_name'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Project_name']=le.fit_transform(df1['Project_name'])
print(le_name_mapping)
# print(df1['Project_name'])

le.fit(df1['Department'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Department']=le.fit_transform(df1['Department'])
print(le_name_mapping)

le.fit(df1['Resource'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Resource']=le.fit_transform(df1['Resource'])
print(le_name_mapping)

le.fit(df1['Project_Name'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Project_Name']=le.fit_transform(df1['Project_Name'])
print(le_name_mapping)

le.fit(df1['Department.1'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Department.1']=le.fit_transform(df1['Department.1'])
print(le_name_mapping)
print(le_name_map)
# df1['Project_name']=le.fit_transform(df1['Project_name'])
# df1['Department']=le.fit_transform(df1['Department'])
# df1['Resource']=le.fit_transform(df1['Resource'])
# df1['Project_Name']=le.fit_transform(df1['Project_Name'])
# df1['Department.1']=le.fit_transform(df1['Department.1'])
# print(df1)
# Project_name	Department	Resource	Project_Name	Department
X=df1
print(X)

le = LabelEncoder()
'''
le.fit(df1['Department'])
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
for key,value in le_name_mapping.items():
    le_name_map[key]=value
df1['Department']=le.fit_transform(df1['Department'])
print(le_name_mapping)
'''
le.fit(target)
# target=le.fit_transform(target)
le_name_mapping=dict(zip(le.classes_, le.transform(le.classes_)))
print(le_name_mapping)
target=le.fit_transform(target)
print(target)
y=target

dtree = DecisionTreeClassifier()
dtree.fit(X,y)
print(dir(dtree))
print(dtree.criterion)
dec_tree = plot_tree(decision_tree=dtree, feature_names = df1.columns,
                     class_names =["AccessDenied","AccessGranted"] , filled = True , precision = 4, rounded = True, fontsize=7.4,ax=plt.axes((6,6,6,6)))

import copy
n_nodes = dtree.tree_.node_count
children_left = dtree.tree_.children_left
children_right = dtree.tree_.children_right
feature = dtree.tree_.feature
threshold = dtree.tree_.threshold
value = dtree.tree_.value
print(value)
print(type(value[0][0][0]))
# access_approval=dtree.tree_.__getstate__
# print(dir(access_approval))
# print(access_approval)

# print(n_nodes)
# print(children_left)
# print(children_right)
# print(feature)
# print(threshold)
# print(access_approval)

feature_names=["DESIGNATION","Project_name","Department","Resource","Project_name.1","Department.1"]

'''
stack=[0]
while stack.empty()!=True:
    node=stack.top()
    print(children_left[node])
    print(children_right[node])
    if feature[node]<0:
        print("LeafNode")
    else:
        print(feature_names[feature[node]]+"<="+threshold[node])
    stack.pop()
'''
rules=[]

def traverse(node,rule):
    global children_left,children_right,feature,threshold,feature_names,rules,value
    curr_feature=feature_names[feature[node]]
    curr_threshold=threshold[node]
    left_child=children_left[node]
    right_child=children_right[node]
    left_rule=copy.copy(rule)
    right_rule=copy.copy(rule)

    if left_child<0 and right_child<0:
        if value[node][0][0]>value[node][0][1]:
            rule.append("Access=0")
        else:
            rule.append("Access=1")
        rules.append(rule)

        # print(rule)
        # rule=""
        return

    if(left_child>0):
        left_rule.append(str(curr_feature)+"<="+str(curr_threshold))
        # print(left_rule)
        traverse(left_child,left_rule)

    if(right_child>0):
        # print(right_rule)
        right_rule.append(str(curr_feature)+">"+str(curr_threshold))
        # print(right_rule)
        traverse(right_child,right_rule)

rule=[]
traverse(0,rule)
for rule in rules:
    print(rule)
# print(rules)
print(len(rules))

def parse(split):
    attribute=""
    sign=""
    value=""
    for i in range(len(split)):
        char=split[i]
        if char=='>':
            sign+='>'
            value+=split[i+1:]
            break
        if char=='<':
            sign+='<='
            value+=split[i+2:]
            break
        if char=='=':
            sign+='='
            value+=split[i+1:]
            break
        else:
            attribute+=char
    return [attribute,sign,value]


def changeLimits(intervals,rule,rule_intervals):
    curr_interval=intervals
    for split in rule:
        curr_split=parse(split)
        attribute=curr_split[0]
        sign=curr_split[1]
        value=curr_split[2]
        value=int(float(value))
        # print(curr_split)
        if sign=='>':
            value+=1
            if value>curr_interval[attribute][0]:
                curr_interval[attribute][0]=value
        if sign=='<=':
            if value<curr_interval[attribute][1]:
                curr_interval[attribute][1]=value
        # print(curr_interval)
        if sign=='=':
            curr_interval[attribute][0]=value
            curr_interval[attribute][1]=value

    print(curr_interval)
    rule_interval=[]
    for interval in curr_interval:
        rule_interval.append(str(curr_interval[interval]))
        # rule_interval+=","
    rule_intervals.append(rule_interval)
    # print()

def initialiseIntervals(intervals):
    intervals["DESIGNATION"][0]=0
    intervals["DESIGNATION"][1]=11
    intervals["Project_name"][0]=0
    intervals["Project_name"][1]=1
    intervals["Department"][0]=0
    intervals["Department"][1]=4
    intervals["Resource"][0]=0
    intervals["Resource"][1]=7
    intervals["Project_name.1"][0]=0
    intervals["Project_name.1"][1]=1
    intervals["Department.1"][0]=0
    intervals["Department.1"][1]=3

intervals={"DESIGNATION":[0,11],"Project_name":[0,1],"Department":[0,4],"Resource":[0,7],"Project_name.1":[0,1],"Department.1":[0,3],"Access":[0,1]}
rule_intervals=[]
count=0
for rule in rules:
    count+=1
    changeLimits(intervals,rule,rule_intervals)
    initialiseIntervals(intervals)
    # if count>1:
    #     break

print()
print(rule_intervals)

# 1. Add Access column : Done
# 2. Decode the values to strings
# 3. Write the values to excel

Designation_value={'CEO': 0, 'CTO': 1, 'DATABASE_ENGINEER': 2, 'DESIGNER': 3, 'FINANCE MANAGER': 4, 'HR MANAGER': 5, 'IT_MANAGER': 6, 'NETWORK_ENGINEER': 7, 'PROGRAMMER': 8, 'PROJECT_LEADER': 9, 'PROJECT_MANAGER': 10, 'SDE': 11}
Project_value={'P1': 0, 'P2': 1}
Department_value={'ADMINISTRATION': 0, 'DEVELOPMENT': 1, 'FINANCE': 2, 'HR': 3, 'TECHNICAL': 4}
Resource_value={'CLIENT_DETAIL': 0, 'DATABASE': 1, 'EMP_DETAIL': 2, 'NETWORK_SETUP': 3, 'PROJECT_COST': 4, 'PROJECT_DETAIL': 5, 'SALARY_DETAIL': 6, 'SERVER': 7}
Project1_value={'P1': 0, 'P2': 1}
Department1_value={'DEVELOPMENT': 0, 'FINANCE': 1, 'HR': 2, 'TECHNICAL': 3}
Access_value={'Access Denied':0, 'Access Granted':1}

def get_key(dict_name,value):
    for key, val in dict_name.items():
        if value == val:
            return key

def find_min_max(interval):
    length=len(interval)
    interval=interval[1:length-1]
    i=0
    while interval[i]!=',':
        i+=1
    min=interval[:i]
    min=int(min)
    max=interval[i+1:]
    max=int(max)
    curr_interval=[min,max]
    return curr_interval


rules_string=[]
for rule in rule_intervals:
    ind=0
    rule_string=[]
    for interval in rule:
        curr_interval=find_min_max(interval)
        min=curr_interval[0]
        max=curr_interval[1]
        values=[]
        # print(min)
        # print(max)
        # break
        # dict_name=""
        if ind==0:
            for i in range(min,max+1):
                values.append(get_key(Designation_value,i))
        elif ind==1:
            for i in range(min,max+1):
                values.append(get_key(Project_value,i))
        elif ind==2:
            for i in range(min,max+1):
                values.append(get_key(Department_value,i))
        elif ind==3:
            for i in range(min,max+1):
                values.append(get_key(Resource_value,i))
        elif ind==4:
            for i in range(min,max+1):
                values.append(get_key(Project1_value,i))
        elif ind==5:
            for i in range(min,max+1):
                values.append(get_key(Department1_value,i))
        elif ind==6:
            for i in range(min,max+1):
                values.append(get_key(Access_value,i))
        rule_string.append(values)
        ind+=1
        # break
    rules_string.append(rule_string)
    print(rule_string)
    # break

# Writing to an excel
# sheet using Python
import xlwt
from xlwt import Workbook

# Workbook is created
wb = Workbook()

# add_sheet is used to create sheet.
policy = wb.add_sheet('Sheet 1')

# sheet1.write(1, 0, 'ISBT DEHRADUN')
# sheet1.write(2, 0, 'SHASTRADHARA')
# sheet1.write(3, 0, 'CLEMEN TOWN')
# sheet1.write(4, 0, 'RAJPUR ROAD')
# sheet1.write(5, 0, 'CLOCK TOWER')
policy.write(0,0,'DESIGNATION')
policy.write(0,1,'Project_name')
policy.write(0,2,'Department')
policy.write(0,3,'Resource')
policy.write(0,4,'Project_name')
policy.write(0,5,'Department')
policy.write(0,6,'Access')

print(len(rules_string))
print(len(rules_string[0]))
print(len(rules_string[0][0]))
for row in range(len(rule_intervals)):
    for col in range(7):
        # print(rules_string[row][col])
        attributes=""
        for attr in rules_string[row][col]:
            attributes+=attr
            attributes+=','
        attributes=attributes[:-1]
        print(attributes)
        policy.write(row+1,col,attributes)

policy.write(75,0,"Hello!, I love you!")

wb.save('/content/drive/MyDrive/xlwt example.xls')

# Writing to an excel
# sheet using Python
import xlwt
from xlwt import Workbook

# Workbook is created
curr_work= Workbook()

# add_sheet is used to create sheet.
policy = curr_work.add_sheet('Sheet 1')

# sheet1.write(1, 0, 'ISBT DEHRADUN')
# sheet1.write(2, 0, 'SHASTRADHARA')
# sheet1.write(3, 0, 'CLEMEN TOWN')
# sheet1.write(4, 0, 'RAJPUR ROAD')
# sheet1.write(5, 0, 'CLOCK TOWER')
policy.write(0,0,'DESIGNATION')
policy.write(0,1,'Project_name')
policy.write(0,2,'Department')
policy.write(0,3,'Resource')
policy.write(0,4,'Project_name')
policy.write(0,5,'Department')
policy.write(0,6,'Access')

print(len(rules_string))
print(len(rules_string[0]))
print(len(rules_string[0][0]))
for row in range(len(rule_intervals)):
    for col in range(7):
        # print(rules_string[row][col])
        attributes=""
        for attr in rules_string[row][col]:
            attributes+=attr
            attributes+=','
        attributes=attributes[:-1]
        print(attributes)
        policy.write(row+1,col,attributes)

policy.write(75,0,"")

wb.save('/content/drive/MyDrive/policy.xls')